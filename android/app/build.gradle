apply plugin: "com.android.application"

import com.android.build.OutputFile

import java.text.SimpleDateFormat

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
//https://facebook.github.io/react-native/docs/signed-apk-android.html#conten
//如果Play Store 有提供支持的话
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

//def DEFAULT_GOOGLE_PLAY_SERVICES_VERSION    = "+"

def buildTime() {
    SimpleDateFormat df = new SimpleDateFormat("yyMMddHHmm")
    return Integer.parseInt(df.format(new Date()))
}

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

repositories {
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    dexOptions {
        javaMaxHeapSize "2g"
    }
    defaultConfig {
        renderscriptTargetApi 27
        renderscriptSupportModeEnabled true
        applicationId "com.combo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode buildTime()
        versionName "1.3.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
                QQ_APPID: "1106001821",
        ]
        multiDexEnabled true
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
//            v2SigningEnabled false
        }
    }

    buildTypes {
        debug {
//            applicationIdSuffix ".debug"
            buildConfigField "String", "CODEPUSH_KEY", '""'
            manifestPlaceholders = [isDebug:true]
        }
        releaseStaging {
            buildConfigField "String", "CODEPUSH_KEY", '"Eja0vMGPjbKeYRWGs3vrrzzdZcXAHyYUc6tiQ"'
            manifestPlaceholders = [isDebug:false]
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            //指定匹配失败匹配其他变体
            matchingFallbacks = ['debug', 'qa', 'release'] // 添加这段代码
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", '"6mfF4pYKvC4SNi77z9xKD7JStu8MSkjD5aYsX"'
            manifestPlaceholders = [isDebug:false]
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-umeng-analytics')
    implementation project(':@react-native-community_netinfo')
    implementation project(':@react-native-community_viewpager')
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-fast-image')
    implementation project(':react-native-screens')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-restart')
    implementation project(':react-native-exception-handler')
    implementation project(':react-native-calendar-events')
    implementation project(':react-native-code-push')
    implementation project(':react-native-i18n')
    implementation project(':react-native-update-app')
    implementation project(':react-native-alipay')
    implementation project(':react-native-autogrow-textinput')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-keychain')
    implementation project(':react-native-fs')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-qq')
    implementation project(':react-native-vector-icons')
    implementation project(":reactnativekeyboardinput")
    implementation project(':react-native-orientation')
    implementation project(':react-native-blur')
    implementation project(':react-native-wechat')
    implementation project(':react-native-leancloud-push')
    implementation project(':react-native-push-notification')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-dialogs')
    implementation project(':react-native-device-info')
    implementation "com.google.android.gms:play-services-gcm:${safeExtGet('googlePlayServicesVersion', '+')}"
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${safeExtGet('supportLibVersion', '+')}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.facebook.soloader:soloader:0.6.0+'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
